{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type
    // source.php meta.class.php meta.block.php meta.function.php meta.block.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.function.arguments
    //     meta.function.parameters
    //     meta.use
    //     string
    //     support.class
    //     variable.other
    //     variable.parameter
    //     meta.function.return-type

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type, source.php meta.class.php meta.block.php meta.function.php meta.block.php - comment - constant.other.class - entity - meta.catch - meta.function.arguments - meta.function.parameters - meta.use - string - support.class - variable.other - variable.parameter - meta.function.return-type",
    "completions": [
        {"trigger":"appendErrorsToException","contents":"\\$this->appendErrorsToException(${1:errors}, ${2:exception});","kind":"function","annotation":"appendErrorsToException($errors, $exception)","details":"appendErrorsToException($errors, $exception)"},
        {"trigger":"appendExceptionToException","contents":"\\$this->appendExceptionToException(${1:exceptionToAppend}, ${2:exception});","kind":"function","annotation":"appendExceptionToException($exceptionToAppend, $exception)","details":"appendExceptionToException($exceptionToAppend, $exception)"},
        {"trigger":"appendMessageToException","contents":"\\$this->appendMessageToException(${1:message}, ${2:exception});","kind":"function","annotation":"appendMessageToException($message, $exception)","details":"appendMessageToException($message, $exception)"},
        {"trigger":"assertAccepted","contents":"\\$this->assertAccepted();","kind":"function","annotation":"assertAccepted()","details":"assertAccepted()"},
        {"trigger":"assertAuthenticated","contents":"\\$this->assertAuthenticated($1);","kind":"function","annotation":"assertAuthenticated($1)","details":"assertAuthenticated($1)"},
        {"trigger":"assertAuthenticatedAs","contents":"\\$this->assertAuthenticatedAs(${1:user});","kind":"function","annotation":"assertAuthenticatedAs($user)","details":"assertAuthenticatedAs($user)"},
        {"trigger":"assertBadRequest","contents":"\\$this->assertBadRequest();","kind":"function","annotation":"assertBadRequest()","details":"assertBadRequest()"},
        {"trigger":"assertConflict","contents":"\\$this->assertConflict();","kind":"function","annotation":"assertConflict()","details":"assertConflict()"},
        {"trigger":"assertContent","contents":"\\$this->assertContent(${1:value});","kind":"function","annotation":"assertContent($value)","details":"assertContent($value)"},
        {"trigger":"assertCookie","contents":"\\$this->assertCookie(${1:cookieName});","kind":"function","annotation":"assertCookie($cookieName)","details":"assertCookie($cookieName)"},
        {"trigger":"assertCookieExpired","contents":"\\$this->assertCookieExpired(${1:cookieName});","kind":"function","annotation":"assertCookieExpired($cookieName)","details":"assertCookieExpired($cookieName)"},
        {"trigger":"assertCookieMissing","contents":"\\$this->assertCookieMissing(${1:cookieName});","kind":"function","annotation":"assertCookieMissing($cookieName)","details":"assertCookieMissing($cookieName)"},
        {"trigger":"assertCookieNotExpired","contents":"\\$this->assertCookieNotExpired(${1:cookieName});","kind":"function","annotation":"assertCookieNotExpired($cookieName)","details":"assertCookieNotExpired($cookieName)"},
        {"trigger":"assertCreated","contents":"\\$this->assertCreated();","kind":"function","annotation":"assertCreated()","details":"assertCreated()"},
        {"trigger":"assertCredentials","contents":"\\$this->assertCredentials(${1:array:credentials});","kind":"function","annotation":"assertCredentials(array $credentials)","details":"assertCredentials(array $credentials)"},
        {"trigger":"assertDatabaseCount","contents":"\\$this->assertDatabaseCount(${1:table}, ${2:int:count});","kind":"function","annotation":"assertDatabaseCount($table, int $count)","details":"assertDatabaseCount($table, int $count)"},
        {"trigger":"assertDatabaseEmpty","contents":"\\$this->assertDatabaseEmpty(${1:table});","kind":"function","annotation":"assertDatabaseEmpty($table)","details":"assertDatabaseEmpty($table)"},
        {"trigger":"assertDatabaseHas","contents":"\\$this->assertDatabaseHas(${1:table}, ${2:array:data});","kind":"function","annotation":"assertDatabaseHas($table, array $data)","details":"assertDatabaseHas($table, array $data)"},
        {"trigger":"assertDatabaseMissing","contents":"\\$this->assertDatabaseMissing(${1:table}, ${2:array:data});","kind":"function","annotation":"assertDatabaseMissing($table, array $data)","details":"assertDatabaseMissing($table, array $data)"},
        {"trigger":"assertDontSee","contents":"\\$this->assertDontSee(${1:value});","kind":"function","annotation":"assertDontSee($value)","details":"assertDontSee($value)"},
        {"trigger":"assertDontSeeText","contents":"\\$this->assertDontSeeText(${1:value});","kind":"function","annotation":"assertDontSeeText($value)","details":"assertDontSeeText($value)"},
        {"trigger":"assertDownload","contents":"\\$this->assertDownload($1);","kind":"function","annotation":"assertDownload($1)","details":"assertDownload($1)"},
        {"trigger":"assertExactJson","contents":"\\$this->assertExactJson(${1:array:data});","kind":"function","annotation":"assertExactJson(array $data)","details":"assertExactJson(array $data)"},
        {"trigger":"assertForbidden","contents":"\\$this->assertForbidden();","kind":"function","annotation":"assertForbidden()","details":"assertForbidden()"},
        {"trigger":"assertFound","contents":"\\$this->assertFound();","kind":"function","annotation":"assertFound()","details":"assertFound()"},
        {"trigger":"assertGone","contents":"\\$this->assertGone();","kind":"function","annotation":"assertGone()","details":"assertGone()"},
        {"trigger":"assertGuest","contents":"\\$this->assertGuest($1);","kind":"function","annotation":"assertGuest($1)","details":"assertGuest($1)"},
        {"trigger":"assertHeader","contents":"\\$this->assertHeader(${1:headerName});","kind":"function","annotation":"assertHeader($headerName)","details":"assertHeader($headerName)"},
        {"trigger":"assertHeaderMissing","contents":"\\$this->assertHeaderMissing(${1:headerName});","kind":"function","annotation":"assertHeaderMissing($headerName)","details":"assertHeaderMissing($headerName)"},
        {"trigger":"assertInternalServerError","contents":"\\$this->assertInternalServerError();","kind":"function","annotation":"assertInternalServerError()","details":"assertInternalServerError()"},
        {"trigger":"assertInvalid","contents":"\\$this->assertInvalid();","kind":"function","annotation":"assertInvalid()","details":"assertInvalid()"},
        {"trigger":"assertInvalidCredentials","contents":"\\$this->assertInvalidCredentials(${1:array:credentials});","kind":"function","annotation":"assertInvalidCredentials(array $credentials)","details":"assertInvalidCredentials(array $credentials)"},
        {"trigger":"assertJson","contents":"\\$this->assertJson(${1:value});","kind":"function","annotation":"assertJson($value)","details":"assertJson($value)"},
        {"trigger":"assertJsonCount","contents":"\\$this->assertJsonCount(${1:int:count});","kind":"function","annotation":"assertJsonCount(int $count)","details":"assertJsonCount(int $count)"},
        {"trigger":"assertJsonFragment","contents":"\\$this->assertJsonFragment(${1:array:data});","kind":"function","annotation":"assertJsonFragment(array $data)","details":"assertJsonFragment(array $data)"},
        {"trigger":"assertJsonIsArray","contents":"\\$this->assertJsonIsArray($1);","kind":"function","annotation":"assertJsonIsArray($1)","details":"assertJsonIsArray($1)"},
        {"trigger":"assertJsonIsObject","contents":"\\$this->assertJsonIsObject($1);","kind":"function","annotation":"assertJsonIsObject($1)","details":"assertJsonIsObject($1)"},
        {"trigger":"assertJsonMissing","contents":"\\$this->assertJsonMissing(${1:array:data});","kind":"function","annotation":"assertJsonMissing(array $data)","details":"assertJsonMissing(array $data)"},
        {"trigger":"assertJsonMissingExact","contents":"\\$this->assertJsonMissingExact(${1:array:data});","kind":"function","annotation":"assertJsonMissingExact(array $data)","details":"assertJsonMissingExact(array $data)"},
        {"trigger":"assertJsonMissingPath","contents":"\\$this->assertJsonMissingPath(${1:string:path});","kind":"function","annotation":"assertJsonMissingPath(string $path)","details":"assertJsonMissingPath(string $path)"},
        {"trigger":"assertJsonMissingValidationErrors","contents":"\\$this->assertJsonMissingValidationErrors();","kind":"function","annotation":"assertJsonMissingValidationErrors()","details":"assertJsonMissingValidationErrors()"},
        {"trigger":"assertJsonPath","contents":"\\$this->assertJsonPath(${1:path}, ${2:expect});","kind":"function","annotation":"assertJsonPath($path, $expect)","details":"assertJsonPath($path, $expect)"},
        {"trigger":"assertJsonStructure","contents":"\\$this->assertJsonStructure();","kind":"function","annotation":"assertJsonStructure()","details":"assertJsonStructure()"},
        {"trigger":"assertJsonValidationErrorFor","contents":"\\$this->assertJsonValidationErrorFor(${1:key});","kind":"function","annotation":"assertJsonValidationErrorFor($key)","details":"assertJsonValidationErrorFor($key)"},
        {"trigger":"assertJsonValidationErrors","contents":"\\$this->assertJsonValidationErrors(${1:errors});","kind":"function","annotation":"assertJsonValidationErrors($errors)","details":"assertJsonValidationErrors($errors)"},
        {"trigger":"assertLocation","contents":"\\$this->assertLocation(${1:uri});","kind":"function","annotation":"assertLocation($uri)","details":"assertLocation($uri)"},
        {"trigger":"assertMethodNotAllowed","contents":"\\$this->assertMethodNotAllowed();","kind":"function","annotation":"assertMethodNotAllowed()","details":"assertMethodNotAllowed()"},
        {"trigger":"assertModelExists","contents":"\\$this->assertModelExists(${1:model});","kind":"function","annotation":"assertModelExists($model)","details":"assertModelExists($model)"},
        {"trigger":"assertModelMissing","contents":"\\$this->assertModelMissing(${1:model});","kind":"function","annotation":"assertModelMissing($model)","details":"assertModelMissing($model)"},
        {"trigger":"assertMovedPermanently","contents":"\\$this->assertMovedPermanently();","kind":"function","annotation":"assertMovedPermanently()","details":"assertMovedPermanently()"},
        {"trigger":"assertNoContent","contents":"\\$this->assertNoContent($1);","kind":"function","annotation":"assertNoContent($1)","details":"assertNoContent($1)"},
        {"trigger":"assertNotAcceptable","contents":"\\$this->assertNotAcceptable();","kind":"function","annotation":"assertNotAcceptable()","details":"assertNotAcceptable()"},
        {"trigger":"assertNotFound","contents":"\\$this->assertNotFound();","kind":"function","annotation":"assertNotFound()","details":"assertNotFound()"},
        {"trigger":"assertNotModified","contents":"\\$this->assertNotModified();","kind":"function","annotation":"assertNotModified()","details":"assertNotModified()"},
        {"trigger":"assertNotSoftDeleted","contents":"\\$this->assertNotSoftDeleted(${1:table});","kind":"function","annotation":"assertNotSoftDeleted($table)","details":"assertNotSoftDeleted($table)"},
        {"trigger":"assertOk","contents":"\\$this->assertOk();","kind":"function","annotation":"assertOk()","details":"assertOk()"},
        {"trigger":"assertPaymentRequired","contents":"\\$this->assertPaymentRequired();","kind":"function","annotation":"assertPaymentRequired()","details":"assertPaymentRequired()"},
        {"trigger":"assertPermanentRedirect","contents":"\\$this->assertPermanentRedirect();","kind":"function","annotation":"assertPermanentRedirect()","details":"assertPermanentRedirect()"},
        {"trigger":"assertPlainCookie","contents":"\\$this->assertPlainCookie(${1:cookieName});","kind":"function","annotation":"assertPlainCookie($cookieName)","details":"assertPlainCookie($cookieName)"},
        {"trigger":"assertRedirect","contents":"\\$this->assertRedirect($1);","kind":"function","annotation":"assertRedirect($1)","details":"assertRedirect($1)"},
        {"trigger":"assertRedirectContains","contents":"\\$this->assertRedirectContains(${1:uri});","kind":"function","annotation":"assertRedirectContains($uri)","details":"assertRedirectContains($uri)"},
        {"trigger":"assertRedirectToRoute","contents":"\\$this->assertRedirectToRoute(${1:name});","kind":"function","annotation":"assertRedirectToRoute($name)","details":"assertRedirectToRoute($name)"},
        {"trigger":"assertRedirectToSignedRoute","contents":"\\$this->assertRedirectToSignedRoute();","kind":"function","annotation":"assertRedirectToSignedRoute()","details":"assertRedirectToSignedRoute()"},
        {"trigger":"assertRequestTimeout","contents":"\\$this->assertRequestTimeout();","kind":"function","annotation":"assertRequestTimeout()","details":"assertRequestTimeout()"},
        {"trigger":"assertSee","contents":"\\$this->assertSee(${1:value});","kind":"function","annotation":"assertSee($value)","details":"assertSee($value)"},
        {"trigger":"assertSeeInOrder","contents":"\\$this->assertSeeInOrder(${1:array:values});","kind":"function","annotation":"assertSeeInOrder(array $values)","details":"assertSeeInOrder(array $values)"},
        {"trigger":"assertSeeText","contents":"\\$this->assertSeeText(${1:value});","kind":"function","annotation":"assertSeeText($value)","details":"assertSeeText($value)"},
        {"trigger":"assertSeeTextInOrder","contents":"\\$this->assertSeeTextInOrder(${1:array:values});","kind":"function","annotation":"assertSeeTextInOrder(array $values)","details":"assertSeeTextInOrder(array $values)"},
        {"trigger":"assertServerError","contents":"\\$this->assertServerError();","kind":"function","annotation":"assertServerError()","details":"assertServerError()"},
        {"trigger":"assertServiceUnavailable","contents":"\\$this->assertServiceUnavailable();","kind":"function","annotation":"assertServiceUnavailable()","details":"assertServiceUnavailable()"},
        {"trigger":"assertSessionDoesntHaveErrors","contents":"\\$this->assertSessionDoesntHaveErrors();","kind":"function","annotation":"assertSessionDoesntHaveErrors()","details":"assertSessionDoesntHaveErrors()"},
        {"trigger":"assertSessionHas","contents":"\\$this->assertSessionHas(${1:key});","kind":"function","annotation":"assertSessionHas($key)","details":"assertSessionHas($key)"},
        {"trigger":"assertSessionHasAll","contents":"\\$this->assertSessionHasAll(${1:array:bindings});","kind":"function","annotation":"assertSessionHasAll(array $bindings)","details":"assertSessionHasAll(array $bindings)"},
        {"trigger":"assertSessionHasErrors","contents":"\\$this->assertSessionHasErrors();","kind":"function","annotation":"assertSessionHasErrors()","details":"assertSessionHasErrors()"},
        {"trigger":"assertSessionHasErrorsIn","contents":"\\$this->assertSessionHasErrorsIn(${1:errorBag});","kind":"function","annotation":"assertSessionHasErrorsIn($errorBag)","details":"assertSessionHasErrorsIn($errorBag)"},
        {"trigger":"assertSessionHasInput","contents":"\\$this->assertSessionHasInput(${1:key});","kind":"function","annotation":"assertSessionHasInput($key)","details":"assertSessionHasInput($key)"},
        {"trigger":"assertSessionHasNoErrors","contents":"\\$this->assertSessionHasNoErrors();","kind":"function","annotation":"assertSessionHasNoErrors()","details":"assertSessionHasNoErrors()"},
        {"trigger":"assertSessionMissing","contents":"\\$this->assertSessionMissing(${1:key});","kind":"function","annotation":"assertSessionMissing($key)","details":"assertSessionMissing($key)"},
        {"trigger":"assertSimilarJson","contents":"\\$this->assertSimilarJson(${1:array:data});","kind":"function","annotation":"assertSimilarJson(array $data)","details":"assertSimilarJson(array $data)"},
        {"trigger":"assertSoftDeleted","contents":"\\$this->assertSoftDeleted(${1:table});","kind":"function","annotation":"assertSoftDeleted($table)","details":"assertSoftDeleted($table)"},
        {"trigger":"assertStatus","contents":"\\$this->assertStatus(${1:status});","kind":"function","annotation":"assertStatus($status)","details":"assertStatus($status)"},
        {"trigger":"assertStreamedContent","contents":"\\$this->assertStreamedContent(${1:value});","kind":"function","annotation":"assertStreamedContent($value)","details":"assertStreamedContent($value)"},
        {"trigger":"assertSuccessful","contents":"\\$this->assertSuccessful();","kind":"function","annotation":"assertSuccessful()","details":"assertSuccessful()"},
        {"trigger":"assertTemporaryRedirect","contents":"\\$this->assertTemporaryRedirect();","kind":"function","annotation":"assertTemporaryRedirect()","details":"assertTemporaryRedirect()"},
        {"trigger":"assertThrows","contents":"\\$this->assertThrows(${1:Closure:test});","kind":"function","annotation":"assertThrows(Closure $test)","details":"assertThrows(Closure $test)"},
        {"trigger":"assertTooManyRequests","contents":"\\$this->assertTooManyRequests();","kind":"function","annotation":"assertTooManyRequests()","details":"assertTooManyRequests()"},
        {"trigger":"assertUnauthorized","contents":"\\$this->assertUnauthorized();","kind":"function","annotation":"assertUnauthorized()","details":"assertUnauthorized()"},
        {"trigger":"assertUnprocessable","contents":"\\$this->assertUnprocessable();","kind":"function","annotation":"assertUnprocessable()","details":"assertUnprocessable()"},
        {"trigger":"assertUnsupportedMediaType","contents":"\\$this->assertUnsupportedMediaType();","kind":"function","annotation":"assertUnsupportedMediaType()","details":"assertUnsupportedMediaType()"},
        {"trigger":"assertValid","contents":"\\$this->assertValid();","kind":"function","annotation":"assertValid()","details":"assertValid()"},
        {"trigger":"assertViewHas","contents":"\\$this->assertViewHas(${1:key});","kind":"function","annotation":"assertViewHas($key)","details":"assertViewHas($key)"},
        {"trigger":"assertViewHasAll","contents":"\\$this->assertViewHasAll(${1:array:bindings});","kind":"function","annotation":"assertViewHasAll(array $bindings)","details":"assertViewHasAll(array $bindings)"},
        {"trigger":"assertViewIs","contents":"\\$this->assertViewIs(${1:value});","kind":"function","annotation":"assertViewIs($value)","details":"assertViewIs($value)"},
        {"trigger":"assertViewMissing","contents":"\\$this->assertViewMissing(${1:key});","kind":"function","annotation":"assertViewMissing($key)","details":"assertViewMissing($key)"},
        {"trigger":"collect","contents":"\\$this->collect($1);","kind":"function","annotation":"collect($1)","details":"collect($1)"},
        {"trigger":"createTestResponse","contents":"\\$this->createTestResponse(${1:response});","kind":"function","annotation":"createTestResponse($response)","details":"createTestResponse($response)"},
        {"trigger":"dd","contents":"\\$this->dd();","kind":"function","annotation":"dd()","details":"dd()"},
        {"trigger":"ddHeaders","contents":"\\$this->ddHeaders();","kind":"function","annotation":"ddHeaders()","details":"ddHeaders()"},
        {"trigger":"ddSession","contents":"\\$this->ddSession($1);","kind":"function","annotation":"ddSession($1)","details":"ddSession($1)"},
        {"trigger":"decodeResponseJson","contents":"\\$this->decodeResponseJson();","kind":"function","annotation":"decodeResponseJson()","details":"decodeResponseJson()"},
        {"trigger":"dump","contents":"\\$this->dump($1);","kind":"function","annotation":"dump($1)","details":"dump($1)"},
        {"trigger":"dumpHeaders","contents":"\\$this->dumpHeaders();","kind":"function","annotation":"dumpHeaders()","details":"dumpHeaders()"},
        {"trigger":"dumpSession","contents":"\\$this->dumpSession($1);","kind":"function","annotation":"dumpSession($1)","details":"dumpSession($1)"},
        {"trigger":"ensureResponseHasView","contents":"\\$this->ensureResponseHasView();","kind":"function","annotation":"ensureResponseHasView()","details":"ensureResponseHasView()"},
        {"trigger":"expectsDatabaseQueryCount","contents":"\\$this->expectsDatabaseQueryCount(${1:expected});","kind":"function","annotation":"expectsDatabaseQueryCount($expected)","details":"expectsDatabaseQueryCount($expected)"},
        {"trigger":"flushMacros","contents":"\\$this->flushMacros();","kind":"function","annotation":"flushMacros()","details":"flushMacros()"},
        {"trigger":"freezeSecond","contents":"\\$this->freezeSecond($1);","kind":"function","annotation":"freezeSecond($1)","details":"freezeSecond($1)"},
        {"trigger":"freezeTime","contents":"\\$this->freezeTime($1);","kind":"function","annotation":"freezeTime($1)","details":"freezeTime($1)"},
        {"trigger":"fromBaseResponse","contents":"\\$this->fromBaseResponse(${1:response});","kind":"function","annotation":"fromBaseResponse($response)","details":"fromBaseResponse($response)"},
        {"trigger":"getCookie","contents":"\\$this->getCookie(${1:cookieName});","kind":"function","annotation":"getCookie($cookieName)","details":"getCookie($cookieName)"},
        {"trigger":"getDeletedAtColumn","contents":"\\$this->getDeletedAtColumn(${1:table});","kind":"function","annotation":"getDeletedAtColumn($table)","details":"getDeletedAtColumn($table)"},
        {"trigger":"hasMacro","contents":"\\$this->hasMacro(${1:name});","kind":"function","annotation":"hasMacro($name)","details":"hasMacro($name)"},
        {"trigger":"head","contents":"\\$this->head(${1:uri});","kind":"function","annotation":"head($uri)","details":"head($uri)"},
        {"trigger":"json","contents":"\\$this->json($1);","kind":"function","annotation":"json($1)","details":"json($1)"},
        {"trigger":"macro","contents":"\\$this->macro(${1:name}, ${2:macro});","kind":"function","annotation":"macro($name, $macro)","details":"macro($name, $macro)"},
        {"trigger":"macroCall","contents":"\\$this->macroCall(${1:method}, ${2:parameters});","kind":"function","annotation":"macroCall($method, $parameters)","details":"macroCall($method, $parameters)"},
        {"trigger":"mixin","contents":"\\$this->mixin(${1:mixin});","kind":"function","annotation":"mixin($mixin)","details":"mixin($mixin)"},
        {"trigger":"offsetExists","contents":"\\$this->offsetExists(${1:offset});","kind":"function","annotation":"offsetExists($offset): bool","details":"offsetExists($offset): bool"},
        {"trigger":"offsetGet","contents":"\\$this->offsetGet(${1:offset});","kind":"function","annotation":"offsetGet($offset): mixed","details":"offsetGet($offset): mixed"},
        {"trigger":"offsetSet","contents":"\\$this->offsetSet(${1:offset}, ${2:value});","kind":"function","annotation":"offsetSet($offset, $value): void","details":"offsetSet($offset, $value): void"},
        {"trigger":"offsetUnset","contents":"\\$this->offsetUnset(${1:offset});","kind":"function","annotation":"offsetUnset($offset): void","details":"offsetUnset($offset): void"},
        {"trigger":"responseHasView","contents":"\\$this->responseHasView();","kind":"function","annotation":"responseHasView()","details":"responseHasView()"},
        {"trigger":"runTest","contents":"\\$this->runTest();","kind":"function","annotation":"runTest(): mixed","details":"runTest(): mixed"},
        {"trigger":"session","contents":"\\$this->session();","kind":"function","annotation":"session()","details":"session()"},
        {"trigger":"statusMessageWithDetails","contents":"\\$this->statusMessageWithDetails(${1:expected}, ${2:actual});","kind":"function","annotation":"statusMessageWithDetails($expected, $actual)","details":"statusMessageWithDetails($expected, $actual)"},
        {"trigger":"streamedContent","contents":"\\$this->streamedContent();","kind":"function","annotation":"streamedContent()","details":"streamedContent()"},
        {"trigger":"tap","contents":"\\$this->tap($1);","kind":"function","annotation":"tap($1)","details":"tap($1)"},
        {"trigger":"tearDownAfterClass","contents":"\\$this->tearDownAfterClass();","kind":"function","annotation":"tearDownAfterClass(): void","details":"tearDownAfterClass(): void"},
        {"trigger":"transformNotSuccessfulException","contents":"\\$this->transformNotSuccessfulException(${1:exception});","kind":"function","annotation":"transformNotSuccessfulException($exception)","details":"transformNotSuccessfulException($exception)"},
        {"trigger":"travel","contents":"\\$this->travel(${1:value});","kind":"function","annotation":"travel($value)","details":"travel($value)"},
        {"trigger":"travelBack","contents":"\\$this->travelBack();","kind":"function","annotation":"travelBack()","details":"travelBack()"},
        {"trigger":"travelTo","contents":"\\$this->travelTo(${1:date});","kind":"function","annotation":"travelTo($date)","details":"travelTo($date)"},
        {"trigger":"viewData","contents":"\\$this->viewData(${1:key});","kind":"function","annotation":"viewData($key)","details":"viewData($key)"},
        {"trigger":"withBasicAuth","contents":"\\$this->withBasicAuth(${1:string:username}, ${2:string:password});","kind":"function","annotation":"withBasicAuth(string $username, string $password)","details":"withBasicAuth(string $username, string $password)"},
        {"trigger":"withCookie","contents":"\\$this->withCookie(${1:string:name}, ${2:string:value});","kind":"function","annotation":"withCookie(string $name, string $value)","details":"withCookie(string $name, string $value)"},
        {"trigger":"withCookies","contents":"\\$this->withCookies(${1:array:cookies});","kind":"function","annotation":"withCookies(array $cookies)","details":"withCookies(array $cookies)"},
        {"trigger":"withCredentials","contents":"\\$this->withCredentials();","kind":"function","annotation":"withCredentials()","details":"withCredentials()"},
        {"trigger":"withDeprecationHandling","contents":"\\$this->withDeprecationHandling();","kind":"function","annotation":"withDeprecationHandling()","details":"withDeprecationHandling()"},
        {"trigger":"withExceptionHandling","contents":"\\$this->withExceptionHandling();","kind":"function","annotation":"withExceptionHandling()","details":"withExceptionHandling()"},
        {"trigger":"withExceptions","contents":"\\$this->withExceptions(${1:Illuminate\\Support\\Collection:exceptions});","kind":"function","annotation":"withExceptions(Illuminate\\Support\\Collection $exceptions)","details":"withExceptions(Illuminate\\Support\\Collection $exceptions)"},
        {"trigger":"withHeader","contents":"\\$this->withHeader(${1:string:name}, ${2:string:value});","kind":"function","annotation":"withHeader(string $name, string $value)","details":"withHeader(string $name, string $value)"},
        {"trigger":"withHeaders","contents":"\\$this->withHeaders(${1:array:headers});","kind":"function","annotation":"withHeaders(array $headers)","details":"withHeaders(array $headers)"},
        {"trigger":"withMiddleware","contents":"\\$this->withMiddleware($1);","kind":"function","annotation":"withMiddleware($1)","details":"withMiddleware($1)"},
        {"trigger":"withMix","contents":"\\$this->withMix();","kind":"function","annotation":"withMix()","details":"withMix()"},
        {"trigger":"withServerVariables","contents":"\\$this->withServerVariables(${1:array:server});","kind":"function","annotation":"withServerVariables(array $server)","details":"withServerVariables(array $server)"},
        {"trigger":"withSession","contents":"\\$this->withSession(${1:array:data});","kind":"function","annotation":"withSession(array $data)","details":"withSession(array $data)"},
        {"trigger":"withToken","contents":"\\$this->withToken(${1:string:token});","kind":"function","annotation":"withToken(string $token)","details":"withToken(string $token)"},
        {"trigger":"withUnencryptedCookie","contents":"\\$this->withUnencryptedCookie(${1:string:name}, ${2:string:value});","kind":"function","annotation":"withUnencryptedCookie(string $name, string $value)","details":"withUnencryptedCookie(string $name, string $value)"},
        {"trigger":"withUnencryptedCookies","contents":"\\$this->withUnencryptedCookies(${1:array:cookies});","kind":"function","annotation":"withUnencryptedCookies(array $cookies)","details":"withUnencryptedCookies(array $cookies)"},
        {"trigger":"withViewErrors","contents":"\\$this->withViewErrors(${1:array:errors});","kind":"function","annotation":"withViewErrors(array $errors)","details":"withViewErrors(array $errors)"},
        {"trigger":"withVite","contents":"\\$this->withVite();","kind":"function","annotation":"withVite()","details":"withVite()"},
        {"trigger":"withoutDeprecationHandling","contents":"\\$this->withoutDeprecationHandling();","kind":"function","annotation":"withoutDeprecationHandling()","details":"withoutDeprecationHandling()"},
        {"trigger":"withoutExceptionHandling","contents":"\\$this->withoutExceptionHandling($1);","kind":"function","annotation":"withoutExceptionHandling($1)","details":"withoutExceptionHandling($1)"},
        {"trigger":"withoutMiddleware","contents":"\\$this->withoutMiddleware($1);","kind":"function","annotation":"withoutMiddleware($1)","details":"withoutMiddleware($1)"},
        {"trigger":"withoutMix","contents":"\\$this->withoutMix();","kind":"function","annotation":"withoutMix()","details":"withoutMix()"},
        {"trigger":"withoutMockingConsoleOutput","contents":"\\$this->withoutMockingConsoleOutput();","kind":"function","annotation":"withoutMockingConsoleOutput()","details":"withoutMockingConsoleOutput()"},
        {"trigger":"withoutToken","contents":"\\$this->withoutToken();","kind":"function","annotation":"withoutToken()","details":"withoutToken()"},
        {"trigger":"withoutVite","contents":"\\$this->withoutVite();","kind":"function","annotation":"withoutVite()","details":"withoutVite()"}
    ]
}
